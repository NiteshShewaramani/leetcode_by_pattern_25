class Solution {
  //  Time complexity:O(N*N!)
//Space complexity:O(N*N!)
    List<List<Integer>> res = new ArrayList<>();
    public List<List<Integer>> permuteUnique(int[] nums) {
        //O(N) space
        int visited[] = new int[nums.length];
        Arrays.sort(nums);
        recursion(nums,new ArrayList<Integer>(),visited);
        return res;
        
    }
    private void recursion(int nums[],List<Integer> list,int visited[])
    {
        //break
        if(list.size()==nums.length)
        {
            res.add(new ArrayList<>(list));
            return;
        }
        for(int i=0;i<nums.length;i++)
        {
            //example  [1,1,2]
            if(visited[i]==1 || (i>0 && nums[i] == nums[i-1] && visited[i-1]==0))
            continue;
            
            if(visited[i]==0)
            {
                list.add(nums[i]);
                visited[i]=1;
                recursion(nums,list,visited);
                //backtracking step
                list.remove(list.size()-1);
                visited[i]=0;
            }
        }
    }
}