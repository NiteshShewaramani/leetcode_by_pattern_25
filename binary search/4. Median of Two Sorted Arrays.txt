class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        //Calculate the length of the left half
        int index = (nums1.length+nums2.length+1)/2;
        int length = nums1.length+nums2.length;
        //binary search on the smaller array
        if(nums1.length<nums2.length)
        {
            int low  = 0;
            int high = nums1.length;
            while(low<=high)
            {
                int mid1 = (low+high)/2;
                int mid2 = index - mid1;
                int l1 = Integer.MIN_VALUE;
                int l2 = Integer.MIN_VALUE;
                int r1 = Integer.MAX_VALUE;
                int r2 = Integer.MAX_VALUE;
                if(mid1>0)
                l1 = nums1[mid1-1];
                if(mid2>0)
                l2 = nums2[mid2-1];
                if(mid1<nums1.length)
                r1 = nums1[mid1];
                if(mid2<nums2.length)
                r2 = nums2[mid2];

                if(l2>r1)
                {
                    low=mid1+1;
                }
                else if(l1>r2)
                {
                    high=mid1-1;
                }
                else
                {
                    //found the values
                    //even lenght return 2 values
                    if((length)%2==0)
                    {
                        //System.out.println(l1 + " even " +l2);
                        int min = Math.max(l1,l2);
                        return ((double) (Math.max(l1, l2) + Math.min(r1, r2))) / 2.0;

                    }
                    else
                    {
                        //System.out.println(l1 + " odd " +l2);
                        //odd return 1 value
                        int min = Math.max(l1,l2);
                        return min;
                    }
                }
            }            
        }
        else
        {
            int low  = 0;
            int high = nums2.length;
            while(low<=high)
            {
                /**
                for test case 
                [1,3,4,7,10,12]
                [2,3,6,15]
                 */
                int mid1 = (low+high)/2; // index 2 
                int mid2 = index - mid1; // 5-2 = 3 index value 
                int l1 = Integer.MIN_VALUE;
                if(mid1>0)
                l1 = nums2[mid1-1]; // 3
                int l2 = Integer.MIN_VALUE;
                if(mid2>0) // 4
                l2 = nums1[mid2-1];
                int r1 = Integer.MAX_VALUE;
                if(mid1<nums2.length)
                r1 = nums2[mid1]; // 6
                int r2 = Integer.MAX_VALUE;
                if(mid2<nums1.length)
                r2 = nums1[mid2]; // 7
                 // l1 = 3   r1=6
                 // l2 = 4   r2=7    
                if(l2>r1)
                {
                    low=mid1+1;
                }
                else if(l1>r2)
                {
                    high=mid1-1;
                }
                else
                {
                    
                    //found the values
                    //even lenght return 2 values
                    if((length)%2==0)
                    {
                        //System.out.println(l1 + " even " +l2);
                        return ((double) (Math.max(l1, l2) + Math.min(r1, r2))) / 2.0;

                    }
                    else
                    {
                        //System.out.println(l1 + " odd " +l2);
                        //odd return 1 value
                        return  Math.max(l1,l2);
                    }
                    
                }
            }

        }

        return 0;
        
    }
}