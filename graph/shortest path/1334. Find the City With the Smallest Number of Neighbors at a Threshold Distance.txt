class Solution {
    /**
    TC O(n ^ 3)
    Sc O(n ^ 2)
     */
    public int findTheCity(int n, int[][] edges, int distanceThreshold) {
        int[][] matrix = new int[n][n];
        //create the graph
        for(int i = 0 ;  i < edges.length ; i++)
        {
            int u = edges[i][0];
            int v = edges[i][1];
            int d = edges[i][2];
            matrix[u][v] = d;
            matrix[v][u] = d;
        }

        for(int i = 0 ;  i < n ; i++)
        {
            for(int j = 0 ;  j < n ; j++)
            {
                if(i==j)
                    matrix[i][j] = 0;
                else if(matrix[i][j] == 0)
                    matrix[i][j] = Integer.MAX_VALUE;
            }
        }

        //via k fload warshall
        for(int k = 0 ; k < n ; k++)
        {
            for(int i = 0 ;  i < n ; i++)
            {
                for(int j = 0 ;  j < n ; j++)
                {
                    if(matrix[i][k] == Integer.MAX_VALUE || matrix[k][j] == Integer.MAX_VALUE)
                    {
                        continue;
                    }
                    if(i==j)
                        continue;
                    
                    //via k
                    matrix[i][j] = Math.min(matrix[i][j] ,matrix[i][k] +  matrix[k][j]);
                }
            }
        }

        int count = n;
        int ans= -1;

        for(int i = 0 ;  i < n ; i++)
        {
            int current = 0;
            for(int j = 0 ;  j < n ; j++)
            {
                if(matrix[i][j] <= distanceThreshold )
                    current++;
            }
            if(current <= count)
            {
                count = current;
                ans = i;

            }
        }
        return ans;
        
    }
}