class Solution {
     int[][] directions = new int[][]{{0,-1},{-1,0},{0,1},{1,0}};
     /** 
     SC O(N x M)queue + O(N x M)visited
     TC O(N x M) for loop + BFS O(N x M x 4)
      */
    public int orangesRotting(int[][] grid) {
        int row = grid.length;
        int col = grid[0].length;
        Queue<int[]> queue = new LinkedList<>();
        int freshOranges= 0;
        boolean visited[][] = new boolean[row][col];
        // Set Visited to true in case of rotten oranges and empty cell and put the rotten in queue;
        for(int i =0; i< row; i++ ){
            for(int j = 0; j< col; j++){
                if(grid[i][j] == 2){
                    queue.add(new int[]{i,j});
                    visited[i][j] = true;
                } else if(grid[i][j] == 1){
                    freshOranges++;
                } else if(grid[i][j] == 0){
                    visited[i][j] = true;
                }
            }
        }
        int time = 0;
       //Starting point : Queue contains all the rotten oranges, which will take care of 
       //parallel rotten oranges and time
        while(freshOranges!=0 && !queue.isEmpty()){
            int size = queue.size();
            time++;
            // Increment time in each iteration
            //AT time 1 we will pick out each rotten orange from Q and do BFS
            for(int i =  0; i< size;i++){
                int[] curr = queue.poll();
                int nrow = curr[0];
                int ncol = curr[1];
                // Get the neighbours of 4 directions if they are not visited
                for(int[] neighbour : getNeighbours(nrow, ncol, grid, visited)){
                    // Found = Decrement the fresh oranges and add them in the queue
                    freshOranges--;
                    queue.add(neighbour);
                }
            }
            
        }
     // If the freshoranges are still present after BFS, it means it cannot be rotten, return -1
        return (freshOranges>0) ? -1 : time;
    }
    
    List<int[]> getNeighbours(int row, int col, int[][] grid, boolean visited[][]){
        List<int[]> list = new ArrayList<>();
        for(int i = 0 ; i< directions.length;i++){
            int newrow = row + directions[i][0];
            int newcol = col + directions[i][1];
            if(newrow <0 || newrow >= grid.length || newcol <0 || newcol >=grid[0].length || visited[newrow][newcol] == true){
        continue;           
            }
            visited[newrow][newcol] = true;
            list.add(new int[]{newrow,newcol});
        }
        return list;
    }
}