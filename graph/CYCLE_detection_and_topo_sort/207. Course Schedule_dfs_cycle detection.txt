class Solution {
/**
TC O(V + E)
SC O(V) 2 array visited and path visited 

*/
    public boolean dfs(List<List<Integer>> adjList,int visited[],int pathVisited[],int node)
    {
        visited[node]=1;
        pathVisited[node]=1;
        for(int n : adjList.get(node))
        {
            if(visited[n] == 0)
            {
                boolean result = dfs(adjList,visited,pathVisited,n);
                if(!result)
                return result;
            }
            else if(pathVisited[n] == 1)
            {
                return false;
            }

        }
        pathVisited[node]=0;
        return true;

    }
    
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> adjList=new ArrayList<>();

        for(int i=0;i<numCourses;i++)
        {
            adjList.add(new ArrayList<>());
        }


        for(int i=0;i<prerequisites.length;i++)
        {
            int first = prerequisites[i][0];
            int second = prerequisites[i][1];
            adjList.get(first).add(second);
        }
        int visited[] = new int[numCourses];
        int pathVisited[] = new int[numCourses];

        for(int cou=0;cou<numCourses;cou++)
        {
            boolean result = dfs(adjList,visited,pathVisited,cou);
            if(!result)
                return result;
        }

        return true;
        
    }
}