class Solution {
    public int frogJump(int[] heights) {
      int[] dp = new int[heights.length];
      Arrays.fill(dp, -1);
        return recursion(heights,heights.length-1,dp);
    }
  /**
  Time Complexity:  O(N) due to the recursion with memoization and the linear loop for initialization

Space Complexity: O(N) for the memoization array used to store intermediate results
  **/
    public int recursion(int[] heights,int ind,int[] dp)
    {
        // Base case: if the frog is at the first step
        if (ind == 0) return 0;

        // Memoized result
        if (dp[ind] != -1) return dp[ind];
        
        // Recursively calculate the energy required to 
        // jump to the current step from the previous step
        int jumpOne = recursion(heights, ind - 1,dp) + Math.abs(heights[ind] - heights[ind - 1]);
        
        // Initialize jumpTwo to a large value
        int jumpTwo = Integer.MAX_VALUE;
        
        // If possible, recursively calculate the energy required to 
        // jump to the current step from two steps back
        if (ind > 1) {
            jumpTwo = recursion(heights, ind - 2,dp) + Math.abs(heights[ind] - heights[ind - 2]);
        }
        
        // Return the minimum energy required to reach the current step
        return dp[ind] = Math.min(jumpOne, jumpTwo);
    }


public int frogJumpTabularSolution(int[] heights) {
        int n = heights.length;
        int[] dp = new int[n];
        Arrays.fill(dp, -1);
        // Base case
        dp[0] = 0; 

        // Iterative calculation
        for (int ind = 1; ind < n; ind++) {
            int jumpOne = dp[ind - 1] + Math.abs(heights[ind] - heights[ind - 1]);
            int jumpTwo = Integer.MAX_VALUE;
            if (ind > 1)
            // Store minimum energy for this stair
                jumpTwo = dp[ind - 2] + Math.abs(heights[ind] - heights[ind - 2]);
            dp[ind] = Math.min(jumpOne, jumpTwo); 
        }
        // Return the minimum energy required to reach the last stair
        return dp[n - 1]; 
    }



public int frogJumpSpaceOptimized(int[] heights) {
        int n = heights.length;
        int prev = 0, prev2 = 0; // Initialize for base cases

        // Iterative calculation
        for (int i = 1; i < n; i++) {
            int jumpOne = prev + Math.abs(heights[i] - heights[i - 1]);
            int jumpTwo = Integer.MAX_VALUE;
            if (i > 1)
                jumpTwo = prev2 + Math.abs(heights[i] - heights[i - 2]);
                
            // Minimum energy for current stair
            int cur_i = Math.min(jumpOne, jumpTwo); 
            // Update previous values
            prev2 = prev; 
            prev = cur_i;
        }
        // Return the minimum energy required to reach the last stair
        return prev; 
    }
}