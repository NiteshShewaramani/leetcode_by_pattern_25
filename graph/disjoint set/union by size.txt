/**
Time Complexity:The amortized time complexity for findParent is O(4*alpha) which is nearly constant and unionByRank and unionBySize is O(4*alpha) which is nearly constant, constructor takes O(n) time.
Space Complexity:The space complexity is O(n) due to the size, rank, and parent arrays.

*/
class DisjointSet {
    int size[] , parent[] ;
    public DisjointSet(int n) {
        size = new int[n+1];
        parent = new int[n+1];
        for(int i=0;i<=n;i++)
        {
            //size of each component is 1
            size[i]=1;
            //each element is parent of itself
            parent[i]=i;
        }
      
    }

    public int findParent(int n)
    {
        if(n == parent[n])
            return n;
        //path compression
        return parent[n] = findParent(parent[n]);    

    }


    public boolean find(int u, int v) {
        return findParent(u) == findParent(v);
    }

   

    public void unionBySize(int u, int v) {
        int ultimateParentU = findParent(u);
        int ultimateParentV = findParent(v);
        if(size[ultimateParentU] < size[ultimateParentV])
        {
            parent[ultimateParentU] = ultimateParentV;
            size[ultimateParentV] += size[ultimateParentU];
        }
        else
        {
            parent[ultimateParentV] = ultimateParentU;
            size[ultimateParentU] += size[ultimateParentV];
        }
    }
}
