/**
Time Complexity: O(N) The given stones array is traversed multiple times. Traversing the hashset will also take O(N) time.

Space Complexity: O(Max Row number + Max Column number) 
The Disjoint set will store the nodes using the parent and size/rank array which will take
 (2*number of nodes) space. Since, the number of nodes = max row number + max column number, the overall space complexity is O(Max Row number + Max Column number).
*/
class DisjointSet {
    public int[] size , parent;
    public DisjointSet(int n)
    {
        size=new int[n+1];
        parent = new int[n+1];
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }
    public int findParent(int node){
        if(node == parent[node]) return node;

        return parent[node] = findParent(parent[node]);
    }

    public void unionBySize(int u , int v)
    {
        int parentU = findParent(u);
        int parentV = findParent(v);

        if(parentU == parentV) return;

        if(size[parentU] < size[parentV] )
        {
            size[parentV] = size[parentV] + size[parentU];
            parent[parentU] = parentV;
        }
        else {
            size[parentU] = size[parentV] + size[parentU];
            parent[parentV] = parentU;
        }

    }
}
class Solution {
    public int removeStones(int[][] stones) {
        int maxRow = 0;
        int maxCol = 0;
        for(int i=0;i<stones.length;i++)
        {
            maxRow = Math.max(maxRow,stones[i][0]);
            maxCol = Math.max(maxCol,stones[i][1]);
        }
        DisjointSet ds = new DisjointSet(maxRow + maxCol + 1);

        // make set
        Map<Integer,Integer> stoneNodes = new HashMap();
        for(int i=0;i<stones.length;i++)
        {
            int row = stones[i][0];
            int col = stones[i][1] + maxRow + 1;
            stoneNodes.put(row,1);
            stoneNodes.put(col,1);
            ds.unionBySize(row,col);
        }
        int count=0;
        //unique parents
        for(Map.Entry<Integer,Integer> entry : stoneNodes.entrySet())
        {
            if(entry.getKey() == ds.findParent(entry.getKey()))
                ++count;
            
        }

        return stones.length - count;


        
    }
}