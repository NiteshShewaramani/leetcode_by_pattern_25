class Solution {
//TC O(N x W) 
//SC O(N x W)
    public int unboundedKnapsack(int[] wt, int[] val, int n, int W) {
        Integer[][] memo = new Integer[n][W+1];
        return recursion(wt,val,n,W,0 , memo);
  
    }
    private int recursion(int[] wt, int[] val, int n, int W, int index , Integer[][] memo)
    {
        if(index >= n)
            return 0;

        if(W==0)
            return 0;

        if(memo[index][W] != null)
            return memo[index][W];    


        int notPick = recursion(wt,val,n,W,index+1 , memo);
        int pick = 0;
        if(W >= wt[index])
        {
            //not incrementing index for pick bcaz we can pick same value again
            pick = val[index] + recursion(wt,val,n,W - wt[index] ,index , memo);

        }
        return memo[index][W]  = Math.max(notPick,pick);    

    }
}
