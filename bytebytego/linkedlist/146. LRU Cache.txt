class Node{
    public  Node prev;
    public  Node next;
    public  int value,key;
    public Node(int v,int k)
    {
        value = v;
        key=k;
        this.next = null;
        this.prev = null;
    }
}
class LRUCache {
    int size = 0;
    HashMap<Integer,Node> map ;
    Node head , tail;
    public LRUCache(int capacity) {
        size = capacity;
        map = new HashMap();
        head = new Node(-1,-1);
        tail = new Node(-1,-1);
        head.next = tail;
        tail.prev = head;
    }

    private void deleteNode(Node n)
    {
        Node before = n.prev;
        Node after = n.next;
        before.next = after;
        after.prev = before;
        n.next = null;
        n.prev = null;
    }
    //adding new node at begining always 
    private Node addNode(int key,int value)
    {
        Node n = new Node(value,key);
        Node temp = head.next;
        head.next = n;
        n.next = temp;
        temp.prev = n;
        n.prev = head;
        return n;
    }
    
    public int get(int key) {
        int value = 0;
        if(map.containsKey(key))
        {
            Node n = map.get(key);
            value = n.value;
            //remove and add
            deleteNode(n);
            Node newNode = addNode(key,value);
            map.put(key,newNode);
            return value;
        }
        else
        {
            return -1;
        }
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key))
        {
            Node n = map.get(key);
            deleteNode(n);
            Node newNode = addNode(key,value);
            map.put(key,newNode);
        }
        else
        {
            if(map.size()==size)
            {
                //remove from last add from first
                Node temp = tail.prev;
                deleteNode(temp);
                map.remove(temp.key);
                Node newNode = addNode(key,value);
                map.put(key,newNode);

            }
            else
            {
                Node newNode = addNode(key,value);
                map.put(key,newNode);
            }
        }
        
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */