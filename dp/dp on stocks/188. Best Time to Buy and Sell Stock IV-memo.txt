class Solution {
    /**
    TC O(N x K)
    SC O(N x K)
    instead of buy sell and capcity we are using 
    transaction  0 = buy 1 = sell  2= buy  3= sell  
    even is buy and  odd is sell
    limit is k 
     */
    public int functionMemo(int[] prices, int ind, int trans,int dp[][] , int k) {
        //if k is 2 than trans will be 4 transaction  0 = buy 1 = sell  2= buy  3= sell 
        if (ind >= prices.length || trans == (2*k))
            return 0;

        if(dp[ind][trans] !=-1)
        return dp[ind][trans];

        if (trans%2==0) {
            // we have 2 choices here either we buy or not
            int buy = -prices[ind] + functionMemo(prices, ind + 1, trans+1,dp , k);
            int notBuy = 0 + functionMemo(prices, ind + 1, trans,dp , k);
            dp[ind][trans] = Math.max(buy, notBuy);
        } else {
            // we have 2 choices here either we sell or not
            int sell = prices[ind] + functionMemo(prices, ind + 1, trans+1,dp , k);
            int notsell = 0 + functionMemo(prices, ind + 1, trans,dp , k);
            dp[ind][trans] = Math.max(sell, notsell);
        }
        return dp[ind][trans];
    }

    public int maxProfit(int k , int[] prices) {
        int dp[][] = new int[prices.length + 1][2*k];
        for(int row[]:dp)
        Arrays.fill(row,-1);
        return functionMemo(prices, 0,0,dp ,  k);
    }
}