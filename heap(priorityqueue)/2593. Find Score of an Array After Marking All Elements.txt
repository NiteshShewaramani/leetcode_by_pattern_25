class Pair{
    int num;
    int index;
    Pair(int num, int index)
    { this.num = num; this.index = index; }
}
class Solution {

    //TC - O(nlogn)
    //SC - O(n)
    public long findScore(int[] nums) {
        PriorityQueue<Pair> minHeap =  new PriorityQueue<Pair>((Pair a, Pair b)->{
            if (a.num != b.num) return (a.num - b.num);
            else return (a.index - b.index);
        });
        long ans = 0;

        int[] marked = new int[nums.length];
        /**
        Cost: Inserting n elements into a heap: O(n log n)

Each offer() operation takes O(log n) time.

You do it n times for n elements.
         */
        for(int i=0;i<nums.length;i++)
        {
            minHeap.offer(new Pair(nums[i],i));
        }
       //O(n log n).  log n for removing * n for n elements  
        while(!minHeap.isEmpty())
        {
            Pair  p = minHeap.poll();
            int index=p.index;

            if(marked[index] == 1)
            continue;

            ans = ans + p.num;
            marked[index] = 1;
            if(index-1>=0)
            marked[index-1] = 1;
            
            if(index+1<nums.length)
            marked[index+1] = 1;

        }

        return ans;
        
    }
}