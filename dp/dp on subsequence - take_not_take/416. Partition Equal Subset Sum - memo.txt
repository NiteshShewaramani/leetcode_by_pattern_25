class Solution {
    //TC O (n x sum of array/2)
    //SC O (n x sum of array/2 )
    public boolean canPartition(int[] nums) {

        int totalSum = 0;
        for(int n : nums)
        {
            totalSum+=n;
        }
        if(totalSum%2==1)
        return false;

        totalSum = totalSum/2;
        Boolean dp[][]= new Boolean[nums.length][totalSum+1];

        return recursion(nums.length-1,totalSum,nums,dp);
    }

    private boolean recursion(int index,int target,int[] nums,Boolean dp[][])
    {
        //base case
        if(target == 0)
        return true;
        if(index == 0)
        return nums[index] == target;

        if(dp[index][target] != null)
        return dp[index][target];

        boolean nottake =  recursion(index-1,target,nums,dp);
        boolean take = false;
        if(target>=nums[index])
        {
            take = recursion(index-1,target-nums[index],nums,dp);

        }
        dp[index][target] = take || nottake;

        return dp[index][target];
    }
}