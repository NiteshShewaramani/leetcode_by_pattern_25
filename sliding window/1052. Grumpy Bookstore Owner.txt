class Solution {
    //TC O(n+m)  
    //SC O(1) 
    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {
        int sum = 0;
        //TC O(m) 
        for(int i=0;i<customers.length;i++)
        {
            if(grumpy[i] == 0)
            {
                sum = sum + customers[i];
            }
        }
        int maxSum = 0 , right = 0 , left= 0 ;
        //we can flip 1 to 0 only for a continuous block of minutes given 
        maxSum = Math.max(maxSum,sum);
        //TC O(n) 
        while(right < grumpy.length)
        {
            //flip 1 to 0 and add to sum
            if(grumpy[right] == 1)
            {
                sum = sum + customers[right];
            }
            maxSum = Math.max(maxSum,sum);
            //if the window block size is greater than the minutes increment left to move the window
            if((right-left)+ 1 >= minutes)
            {
                //flip 0 back to the original 1 and remove from the answer
                if(grumpy[left] == 1)
                sum = sum - customers[left];

                left++;
            }
            right++;
        }
        return maxSum;        
    }
}