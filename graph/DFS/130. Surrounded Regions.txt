class Solution {
    /**
    TC O(N) traversing boundry using for loop + O(N x M x 4) dfs time
    SC O(N x M) visited array
     */
    public void solve(char[][] board) {
        
        int rows=board.length;
        int column=board[0].length;
        int visited[][]=new int[rows][column];

        //traversing first row
        for(int j=0;j<column;j++)
        {
            if(board[0][j]=='O')
                dfs(board,visited,0,j);
        }
        //traversing last row
        for(int j=0;j<column;j++)
        {
            if(board[rows-1][j]=='O')
                dfs(board,visited,rows-1,j);
        }

        //traversing first col
        for(int r=1;r<rows-1;r++)
        {
            if(board[r][0]=='O')
                dfs(board,visited,r,0);
        }
        
        //traversing last col
        for(int r=1;r<rows-1;r++)
        {
            if(board[r][column-1]=='O')
                dfs(board,visited,r,column-1);
        }

        for(int i=0;i<rows;i++)
        {
            for(int j=0;j<column;j++)
            {
                if(visited[i][j]==0)
                    board[i][j]='X';
            }
            
        }
    }


    public void dfs(char[][] board,int visited[][],int i,int j)
    {
        if(i<0 || j<0 || i>=board.length || j>=board[0].length)
            return;

        if(visited[i][j]==1 || board[i][j]=='X')
            return;

        //board is O and not visited traverse all direction
        visited[i][j]=1;
        //right
        dfs(board,visited,i,j+1);
        //left
        dfs(board,visited,i,j-1);
        //top
        dfs(board,visited,i-1,j);
        //bottom
        dfs(board,visited,i+1,j);

        
    }
}