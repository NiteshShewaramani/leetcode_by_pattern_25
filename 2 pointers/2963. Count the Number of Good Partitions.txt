class Solution {
    //TC - O(n + n)
    //SC - O(n) - map used 
    public int numberOfGoodPartitions(int[] nums) {
        int noOfPartitions = 0 ;
        int ans = 1;
        Map<Integer,Integer> lastSeen = new HashMap();
        for(int i=0;i<nums.length;i++)
        {
            lastSeen.put(nums[i],i);
        }

        int right = 0 , maxIndex = -1 , mod = 1_000_000_007;

        while(right < nums.length)
        {
            int number  = nums[right];
            int lastIndex = lastSeen.get(number);
            // this is the last seen index for partition
            // example [1,2,1,2,4]
            // when right is at index 1 , maxIndex will point to 3 which is the last seen value of 2
            // when right is equal to maxIndex we have found a partition
            maxIndex = Math.max(lastIndex,maxIndex);
            if(maxIndex == right)
            {
                noOfPartitions++;
                //at every partion we get 2 choices which is nothing but 2 ^ noOfPartitions-1
                //since we need to mod the answer we can't just use power in the end
                // only multiplying with 2 when we get 2nd partition
                if(noOfPartitions > 1)
                ans = (ans * 2) % mod;
            }
            right++;
        }
        return ans;

        //return ( (int)(Math.pow(2,noOfPartitions-1)) % mod);

    }
}