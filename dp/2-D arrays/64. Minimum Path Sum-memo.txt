class Solution {

    public int minPathSum(int[][] grid) {
        int dp[][] = new int[grid.length][grid[0].length];

        for(int[] row : dp)
        Arrays.fill(row,-1);

        return minimum(grid,0,0,dp);

    }
    private int minimum(int[][] grid , int r, int c, int dp[][])
    {
        int rows = grid.length-1;
        int cols = grid[0].length-1;

        if(r>=grid.length || c>=grid[0].length)
        return 1_000_000;

        if(r == rows && cols == c)
        {
            return grid[r][c];
        }
        //prviously calculated path
        if(dp[r][c]!=-1)
        return dp[r][c];

        
        //go right
        int right = grid[r][c] +  minimum(grid,r,c+1,dp);

        
        //go down
        int down = grid[r][c] +  minimum(grid,r+1,c,dp);
        
         dp[r][c] = Math.min(right,down);
         return dp[r][c];
    }
}