class Solution {
    int maxrow=0,maxcol=0;
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        maxrow=obstacleGrid.length;
        maxcol=obstacleGrid[0].length;
        if(obstacleGrid[maxrow-1][maxcol-1] == 1)
        return 0;
        int dp[][] = new int[maxrow][maxcol];

        for(int row[] : dp)
        Arrays.fill(row,-1);

        return calculate(obstacleGrid,dp,0,0);
    }
    private int calculate(int[][] obstacleGrid,int[][] dp,int m,int n)
    {
        if(m>=maxrow || n>= maxcol)
        return 0;
        else if(m == maxrow -1 && n == maxcol-1)
        return 1;
        else if(obstacleGrid[m][n]==1)
        return 0;
        else if(dp[m][n] != -1)
        return dp[m][n];

        dp[m][n]=calculate(obstacleGrid,dp,m+1,n)+calculate(obstacleGrid,dp,m,n+1);

        return dp[m][n];
    }
}