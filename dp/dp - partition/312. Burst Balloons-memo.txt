class Solution {
    /**
    TC - O(N x N) dp x O(N) for loop for k
    SC - O(N x N) + stack space
     */
    private int function(int i,int j,ArrayList<Integer> list,int dp[][])
    {
        if(i>j)
        return 0;

        if(dp[i][j]!=-1)
        return dp[i][j];

        int max=Integer.MIN_VALUE;

        for(int k=i;k<=j;k++)
        {
            //we are busting the last  k ballon
            /**
            Example - [3,1,5,8]
            adding 1 at start and end [1,3,1,5,8,1]
            i points to 3 j points to 8
            we are trying to solve from last ballon burst to the first one 
             */
            int cost = list.get(i-1) * list.get(k) * list.get(j+1)
                +function(i,k-1,list,dp)
                +function(k+1,j,list,dp);
                max=Math.max(max,cost);
            
        }
        return dp[i][j] = max;

    }
    public int maxCoins(int[] nums) {
        ArrayList<Integer> list=new ArrayList<>();
        list.add(1);
        for(int v:nums)
        {
            list.add(v);
        }
        list.add(1);
        
        
        int n=nums.length;
        int dp[][]=new int[n+1][n+1];
        for(int row[]:dp)
        {
            Arrays.fill(row,-1);
        }
        return function(1,nums.length,list,dp);
    }
}