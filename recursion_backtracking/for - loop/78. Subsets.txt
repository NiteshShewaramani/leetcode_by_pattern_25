class Solution {
    /**
    Time complexity:O(2^n  * n) There are 2^n subsets and each subset takes up to O(n) time to copy.
    Space complexity: O(n) (for recursion stack and current subset being built)
     */
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> answer = new ArrayList<>();
        recursion(nums,0,new ArrayList(),answer);
        return answer;
        
    }
    public void recursion(int[] nums,int start,List<Integer> curr,List<List<Integer>> answer )
    {
        answer.add(new ArrayList(curr));


        for(int i=start;i<nums.length;i++)
        {
            curr.add(nums[i]);
            recursion(nums,i+1,curr,answer);
            curr.remove(curr.size()-1);

        }

    }
}