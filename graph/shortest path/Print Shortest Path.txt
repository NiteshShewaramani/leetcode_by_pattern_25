/**
Time Complexity: O((N+M)*logN)

Each node is processed once in the priority queue and deletion and insertion operation takes O(logN) time making it overall O(N*logN) in the worst case.
For each vertex, all its edges are relaxed. This operation involves updating the priority queue, which takes O(logV) making it overall O(M*logN) for E edges in the worst case.
Reconstructing the path involves tracing the parent array, which takes O(N) in the worst case (since we may trace back through all vertices).
Space Complexity: O(N)

The priority queue will store distances to all nodes in worst case leading to O(N) space.
The distance array and parent array takes O(N) space each.
The path array will store O(N) nodes in the worst case.
**/

class Solution {
    /* Function to find the shortest 
    path from node 1 to node n */
    public List<Integer> shortestPath(int n, int m, int[][] edges) {
        
        // Adjacency list to store graph
        List<List<int[]>> adj = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            adj.add(new ArrayList<>());
        }
        
        // Adding the edges to the graph
        for (int[] edge : edges) {
            adj.get(edge[0]).add(new int[]{edge[1], edge[2]});
            adj.get(edge[1]).add(new int[]{edge[0], edge[2]});
        }
        
        /* Using priority queue to 
        implement Dijkstra Algorithm */
        PriorityQueue<int[]> pq = new PriorityQueue<>(
            (a,b) ->
            {
                if(a[0] != b[0])
                {
                    return a[1]-b[1];
                }
                return a[0]-b[0];
            } 

            );
        
        // Distance array
        int[] dist = new int[n + 1];
        Arrays.fill(dist, Integer.MAX_VALUE);
        
        // Parent array
        int[] parent = new int[n + 1];
        
        /* Marking each node as 
        its own parent initially */
        for (int i = 1; i <= n; i++) {
            parent[i] = i;
        }
        
        /* Distance of source node 
        (node 1) to itself is zero */
        dist[1] = 0;
        
        // Push the source node to the queue.
        pq.add(new int[]{0, 1});
        
        // Until the queue is empty
        while (!pq.isEmpty()) {
            /* Get the pair containing node having 
            minimum distance from source node */
            int[] curr = pq.poll();
            
            int node = curr[1]; // node
            int dis = curr[0]; // distance
            
            // Iterate through the neighbors
            for (int[] neighbor : adj.get(node)) {
                int adjNode = neighbor[0]; // node
                int edWt = neighbor[1]; // edge weight
                
                /* If the tentative distance to 
                reach adjacent node is smaller 
                than the known distance */
                if (dis + edWt < dist[adjNode]) {
                    
                    // Update the known distance
                    dist[adjNode] = dis + edWt;
                    
                    // Push the new pair to priority queue
                    pq.add(new int[]{dis + edWt, adjNode});
                    
                    /* Update the parent of the adjNode 
                    to the recent node(where it came from) */
                    parent[adjNode] = node;
                }
            }
        }
        
        /* If distance to the node could not be found, 
        return an array containing -1. */
        if (dist[n] == Integer.MAX_VALUE) {
            return Arrays.asList(-1);
        }
        
        // Array to store the path
        List<Integer> path = new ArrayList<>();
        
        // Start from the destination node
        int node = n;
        
        /* Iterate backwards from destination 
        to source through the parent array */
        while (parent[node] != node) {
            
            // Add the node to the path
            path.add(node); 
            
            // Take a step back
            node = parent[node];
        }
        
        // Add the source node to the path
        path.add(1);
        
        /* Since the path stored is in a 
        reverse order, reverse the array 
        to get the actual path */
        Collections.reverse(path);
        
        // Add the path weight in the beginning
        path.add(0, dist[n]);
        
        // Return the result
        return path;
    }
}