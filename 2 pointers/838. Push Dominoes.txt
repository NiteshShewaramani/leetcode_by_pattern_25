class Solution {
    //TC - O(n+n+n) - 3n - n
    //SC - O(n+n)   - 2n - n
    public String pushDominoes(String dominoes) {
        int n = dominoes.length();
        char[] domino = dominoes.toCharArray();
        int[] closestLeftDominoe   = new int[n];
        int[] closestRightDominoe  = new int[n];

        closestLeftDominoe  = populateLeftDistance(domino,n);
        closestRightDominoe = populateRightDistance(domino,n);
        for(int i=0;i<n;i++)
        {
            char c = domino[i];
            if(c == '.')
            {
                int leftD    = closestLeftDominoe[i];
                int rightD   = closestRightDominoe[i];
                if(leftD == rightD)
                {
                    //do nothing
                }
                else if(rightD == -1)
                {
                    domino[i] = 'L';
                }
                else if(leftD == -1)
                {
                    domino[i] = 'R';
                }
                else
                {
                    int left = Math.abs(i - leftD);
                    int right = Math.abs(i - rightD);
                    if(right<left)
                    {
                        domino[i] = 'R';
                    }
                    else if(left<right)
                    {
                        domino[i] = 'L';
                    }
                }                
            }
        }
        return new String(domino); 
    }

    private int[] populateLeftDistance(char[] domino,int n)
    {
        int[] closestLeftDominoe   = new int[n];
        //scan from right to left 
        //example -  .  L  .  R  .  .  .  L  R  .  .  L  .  . 
        //array   -  1  1 -1 -1  7  7  7  7 -1 11 11 11 -1 -1
        for(int i=n-1;i>=0;i--)
        {
            char c = domino[i];
            if(c == '.' && i!=(n-1))
            {
                closestLeftDominoe[i] = closestLeftDominoe[i+1];
            }
            else if(c == 'L')
            {
                closestLeftDominoe[i] = i;
            }
            else if(c == 'R')
            {
                closestLeftDominoe[i] = -1;
            }
            else
            {
                closestLeftDominoe[i] = -1;
            }
        }
        return closestLeftDominoe;

    }

    private int[] populateRightDistance(char[] domino,int n)
    {
        int[] closestRightDominoe  = new int[n];
        //scan from left to right 
        //example -  .  L  . R . . .  L R . .  L  .  . 
        //array   - -1 -1 -1 3 3 3 3 -1 8 8 8 -1 -1 -1
        for(int i=0;i<n;i++)
        {
            char c = domino[i];
            if(c == '.' && i>0)
            {
                closestRightDominoe[i] = closestRightDominoe[i-1];
            }
            else if(c == 'L')
            {
                closestRightDominoe[i] = -1;
            }
            else if(c == 'R')
            {
                closestRightDominoe[i] = i;
            }
            else
            {
                closestRightDominoe[i] = -1;
            }
        }
        return closestRightDominoe;

    }
}