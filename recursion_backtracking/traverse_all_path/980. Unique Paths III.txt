class Solution {
    int result = 0 , noOfWalkable = 0;
    //TC O(3^ (n*m) ) we have only 3 choice bcaz we are marking visited array so we will never go back worst case we will have 3 choices always
    //SC O(1) nothing used as extra using same input array for marking it visited
    public int uniquePathsIII(int[][] grid) {
        int x = 0 , y = 0 ;

        for(int i=0;i<grid.length;i++)
        {
            for(int j=0;j<grid[i].length;j++)
            {
                if(grid[i][j] == 1)
                {
                    x=i;
                    y=j;
                    ++noOfWalkable;
                }
                else if(grid[i][j] == 0)
                {
                    ++noOfWalkable;
                }
            }
        }
        backT(x,y,grid,0);
        return result;
        
    }
    private void backT(int x,int y,int[][] grid,int count)
    {
        int n = grid.length , m = grid[0].length;
        if(grid[x][y] == 2)
        {
            if(noOfWalkable == count)
            {
                ++result;
                return;
            }
            return;
        }
        int temp = grid[x][y];
        //mark as visited
        grid[x][y] = -1;
        //go up
        if(x-1>=0  && grid[x-1][y]>=0)
        {
            backT(x-1,y,grid,count+1);
        }
        //go down
        if(x+1<n && grid[x+1][y]>=0)
        {
            backT(x+1,y,grid,count+1);
        }
        //go left
        if(y-1>=0 && grid[x][y-1]>=0)
        {
            backT(x,y-1,grid,count+1);
        }
        //go right
        if(y+1<m && grid[x][y+1]>=0)
        {
            backT(x,y+1,grid,count+1);
        }
        //reset the value or backtrack
        grid[x][y] = temp;

    }
}