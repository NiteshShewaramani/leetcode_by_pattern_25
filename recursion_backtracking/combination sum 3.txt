class Solution {
    List<List<Integer>> ans = new ArrayList();
    public List<List<Integer>> combinationSum3(int k, int n) {
        recursion(k,n,new ArrayList(),0);
        return ans;
        
    }

    public void recursion(int k,int target,List<Integer> currentElements,int start)
    {
        if(k == 0)
        {
            if(target == 0)
            {
                ans.add(new ArrayList(currentElements));
                return;
            }
            else
            return;
        }
        
        for(int i=start+1;i<10;i++)
        {
                currentElements.add(i);
                recursion(k-1,target-i,currentElements,i);
                currentElements.remove(currentElements.size()-1);
        }
    }
}
The algorithm explores all combinations of choosing k numbers from the range [1, 9]. So the total number of combinations (worst case) is: 
O((k ^9) . k)  - extra k for coping element into the answer

Space - o(k) 