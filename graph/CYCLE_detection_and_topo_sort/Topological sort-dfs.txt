class Solution {
    /**
    TC - O(V + E )
    SC - stack space
    */
    public int[] topoSort(int V, List<List<Integer>> adj) {
        int[] visited = new int[V];
        Stack<Integer> st = new Stack(); 
        for(int i=0;i<V;i++)
        {
            if(visited[i] == 0)
                dfs(visited,adj,i,st);
        }
        int ans[] = new int[V];
        int j = 0;
        while(!st.isEmpty())
        {
            ans[j++] = st.pop();
        }
        return ans;
    
    }
    
    private void dfs(int visited[], List<List<Integer>> adj,int node,Stack<Integer> st)
    {
        visited[node]=1;
        for(int  n : adj.get(node))
        {
            if(visited[n] == 0)
                dfs(visited,adj,n,st);

        }
        st.add(node);
    }
}