class Solution {
//TC O(N x M)
//SC O(N x M)
//logic minimum operations is length of  both strings minus twice the longest common subsequence bcaz they have that many strings
//common between each other
    public int minOperations(String text1, String text2) {
        int dp[][]= new int[text1.length()][text2.length()];
        for(int row[] : dp)
        {
            Arrays.fill(row,-1);
        }
        return  (text1.length() + text2.length()) - (2*function(text1,text2,text1.length()-1,text2.length()-1,dp));

    }

    private int function(String text1, String text2,int ind1,int ind2,int dp[][])
    {
        if (ind1<0 || ind2<0) return 0;

        
        int case1=0,case2=0;
        if(dp[ind1][ind2]!=-1)
        {
            return dp[ind1][ind2];
        }
        if(text1.charAt(ind1) == text2.charAt(ind2))
        {
            dp[ind1][ind2] = 1+function(text1,text2,ind1-1,ind2-1,dp);
            return dp[ind1][ind2];
        }
        else
        {
            int shrinkSecond = function(text1,text2,ind1,ind2-1,dp);
            int shrinkOne = function(text1,text2,ind1-1,ind2,dp);
            dp[ind1][ind2] = 0 + Math.max(shrinkSecond,shrinkOne);
            return dp[ind1][ind2];
        }

    }
}

